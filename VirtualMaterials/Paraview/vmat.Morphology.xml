<CustomFilterDefinitions>
  <CustomProxyDefinition name="vmat.Morphology" group="filters">
    <CompoundSourceProxy id="4348" servers="1">
      <Proxy group="filters" type="ProgrammableFilter" id="4235" servers="1" compound_name="ProgrammableFilter1">
        <Property name="CopyArrays" id="4235.CopyArrays" number_of_elements="1">
          <Element index="0" value="0"/>
          <Domain name="bool" id="4235.CopyArrays.bool"/>
        </Property>
        <Property name="InformationScript" id="4235.InformationScript" number_of_elements="1">
          <Element index="0" value="&#xa;from paraview import util&#xa; &#xa;inInfo = self.GetExecutive().GetInputInformation(0,0)&#xa;shape=inInfo.Get(vtk.vtkStreamingDemandDrivenPipeline.WHOLE_EXTENT())&#xa;&#xa;util.SetOutputWholeExtent(self, shape)"/>
        </Property>
        <Property name="Input" id="4235.Input" number_of_elements="1">
          <Domain name="groups" id="4235.Input.groups"/>
          <Domain name="input_type" id="4235.Input.input_type"/>
        </Property>
        <Property name="OutputDataSetType" id="4235.OutputDataSetType" number_of_elements="1">
          <Element index="0" value="8"/>
          <Domain name="enum" id="4235.OutputDataSetType.enum">
            <Entry value="8" text="Same as Input"/>
            <Entry value="0" text="vtkPolyData"/>
            <Entry value="2" text="vtkStructuredGrid"/>
            <Entry value="3" text="vtkRectilinearGrid"/>
            <Entry value="4" text="vtkUnstructuredGrid"/>
            <Entry value="6" text="vtkImageData"/>
            <Entry value="10" text="vtkUniformGrid"/>
            <Entry value="13" text="vtkMultiblockDataSet"/>
            <Entry value="15" text="vtkHierarchicalBoxDataSet"/>
            <Entry value="19" text="vtkTable"/>
          </Domain>
        </Property>
        <Property name="PythonPath" id="4235.PythonPath" number_of_elements="1">
          <Element index="0" value=""/>
        </Property>
        <Property name="Script" id="4235.Script" number_of_elements="1">
          <Element index="0" value="# A list of morphological operations can be accessed from this function. &#xa;# Select the morphological operation you want and select custom parameters below &#xa;&#xa;morphologicalOperation=&#x27;Dilation&#x27;&#xa;&#xa;#----------------&#xa;import VirtualMaterials as vmat&#xa;import numpy as np&#xa;pdi = self.GetInputDataObject(0,0)&#xa;numpyInputImage=vmat.Utilities.Utilities.VTKImageToNumpy(pdi)&#xa;#----------------&#xa;&#xa;if morphologicalOperation == &#x27;Dilation&#x27;:&#xa;    # Dilation&#xa;    ballRadius = 2&#xa;    outputImage = vmat.ImageAnalysis.Morphology.Dilation(numpyInputImage.astype(np.bool),ballRadius)&#xa;    outputImage = 255*outputImage&#xa;&#xa;&#xa;elif morphologicalOperation == &#x27;Erosion&#x27;:&#xa;    # Erosion&#xa;    ballRadius = 2&#xa;    outputImage = vmat.ImageAnalysis.Morphology.Erosion(numpyInputImage.astype(np.bool),ballRadius)&#xa;    outputImage = 255*outputImage&#xa;&#xa;&#xa;elif morphologicalOperation == &#x27;DistanceMap&#x27;:&#xa;    # DistanceMap&#xa;    outputImage = vmat.ImageAnalysis.Morphology.DistanceMap(numpyInputImage)&#xa;    outputImage = 255*outputImage&#xa;&#xa;&#xa;&#xa;&#xa;#----Do not modify below-------------------&#xa;numpyOutputImage = outputImage.copy().astype(np.uint8)&#xa;vtkOutputImage=vmat.Utilities.Utilities.NumpyToVTKImage(numpyOutputImage)&#xa;inInfo = self.GetExecutive().GetInputInformation(0,0)&#xa;wholeExtent=inInfo.Get(vtk.vtkStreamingDemandDrivenPipeline.WHOLE_EXTENT())&#xa;vtkOutputImage.SetExtent(wholeExtent)&#xa;&#xa;self.GetOutputDataObject(0).DeepCopy( vtkOutputImage)&#xa;"/>
        </Property>
        <Property name="TimestepValues" id="4235.TimestepValues"/>
        <Property name="UpdateExtentScript" id="4235.UpdateExtentScript" number_of_elements="1">
          <Element index="0" value=""/>
        </Property>
      </Proxy>
      <ExposedProperties>
        <Property name="Input" proxy_name="ProgrammableFilter1" exposed_name="Input"/>
        <Property name="Parameters" proxy_name="ProgrammableFilter1" exposed_name="Parameters"/>
        <Property name="Script" proxy_name="ProgrammableFilter1" exposed_name="Script"/>
      </ExposedProperties>
      <OutputPort name="Output" proxy="ProgrammableFilter1" port_index="0"/>
      <Hints>
        <ShowInMenu/>
      </Hints>
    </CompoundSourceProxy>
  </CustomProxyDefinition>
</CustomFilterDefinitions>
